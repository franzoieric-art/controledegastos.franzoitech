// js/app.js - VERSÃO COM A CORREÇÃO FINAL DO OBJETO RENDER

import { setupAuthEventListeners } from './auth.js';
import { loadUserData, updateUserField } from './firestore.js';
import { showSaveFeedback, applyTheme } from './ui.js';

let state = {
    currentUserId: null,
    profile: { name: '' },
    integrations: { whatsapp: { phoneNumberId: '', accessToken: '', webhookVerifyToken: '' } },
    creditCards: [],
    categories: [],
    recurringEntries: [],
    monthlyData: {},
    activeMonthIndex: new Date().getMonth(),
    chartInstances: {},
    saveTimeout: null
};

const constants = {
    monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", "Balanço Anual"],
    basePaymentMethods: ['Pix', 'Débito', 'Crédito', 'Dinheiro', 'Outro']
};

const helpers = {
    formatCurrency: (value) => {
        if (typeof value !== 'number') value = 0;
        return `R$ ${value.toFixed(2).replace('.', ',')}`;
    }
};

// ==========================================================
// OBJETO RENDER COMPLETO E CORRIGIDO
// ==========================================================
const render = {
    createMonthContentHTML: (monthIndex) => `<div id="month-${monthIndex}-content" class="month-content"><div class="flex justify-end gap-2 mb-4"><button class="export-csv-btn px-4 py-2 text-sm font-semibold rounded-lg" style="background-color: var(--secondary-bg); color: var(--secondary-text);" data-month-index="${monthIndex}">Exportar CSV</button><button class="export-pdf-btn px-4 py-2 text-sm font-semibold rounded-lg" style="background-color: var(--secondary-bg); color: var(--secondary-text);" data-month-index="${monthIndex}">Exportar PDF</button></div><div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8"><div class="lg:col-span-1 p-5 rounded-2xl card border-t-4 border-yellow-400"><h2 class="text-xl font-semibold mb-4">Ganhos PJ</h2><div id="pj-entries-container-${monthIndex}" class="flex flex-col gap-3 mb-3"></div><button class="add-entry-btn mt-2 w-full py-2 text-sm font-semibold rounded-lg" style="background-color: var(--secondary-bg); color: var(--secondary-text);" data-month-index="${monthIndex}" data-type="pj">+ Adicionar Ganho PJ</button></div><div class="lg:col-span-1 p-5 rounded-2xl card border-t-4 border-green-400"><h2 class="text-xl font-semibold mb-4">Ganhos PF</h2><div id="pf-entries-container-${monthIndex}" class="flex flex-col gap-3 mb-3"></div><button class="add-entry-btn mt-2 w-full py-2 text-sm font-semibold rounded-lg" style="background-color: var(--secondary-bg); color: var(--secondary-text);" data-month-index="${monthIndex}" data-type="pf">+ Adicionar Ganho PF</button></div><div class="lg:col-span-1 grid gap-6"><div><div class="p-5 rounded-2xl card border-t-4 border-blue-400 space-y-4"><div class="space-y-1"><label class="block text-sm font-medium muted-text">Caixa da empresa:</label><p id="companyCash-${monthIndex}" class="text-2xl font-semibold">R$ 0,00</p></div><div class="space-y-1"><label class="block text-sm font-medium muted-text">Caixa pessoal:</label><p id="personalCash-${monthIndex}" class="text-2xl font-semibold">R$ 0,00</p></div></div></div><div><div class="flex justify-end mb-2"><button class="toggle-summary-btn text-sm font-medium hover:underline" style="color: var(--primary-color);" data-month-index="${monthIndex}">Ocultar Resumo ▼</button></div><div id="summary-card-${monthIndex}" class="p-5 rounded-2xl card border-t-4 border-purple-400"><h2 class="text-xl font-semibold mb-4">Resumo do Mês</h2><div class="space-y-2 text-sm"><div class="flex justify-between items-center"><span>Gasto Pessoal:</span><span id="totalPersonalExpenses-${monthIndex}" class="font-semibold" style="color: var(--red-color);">R$ 0,00</span></div><div class="flex justify-between items-center"><span>Gasto Empresa:</span><span id="totalBusinessExpenses-${monthIndex}" class="font-semibold" style="color: var(--red-color);">R$ 0,00</span></div><div class="flex justify-between items-center pt-2 border-t" style="border-color: var(--border-color);"><span>Saldo Pessoal:</span><span id="remainingPersonal-${monthIndex}" class="font-semibold">R$ 0,00</span></div><div class="flex justify-between items-center"><span>Saldo Empresa:</span><span id="remainingBusiness-${monthIndex}" class="font-semibold">R$ 0,00</span></div><div class="flex justify-between items-center border-t pt-2 mt-2" style="border-color: var(--border-color);"><span class="font-semibold">Saldo Total:</span><span id="remainingTotal-${monthIndex}" class="text-xl font-bold">R$ 0,00</span></div></div><div id="budget-alerts-${monthIndex}" class="mt-3 text-xs"></div></div></div></div></div></div>`,
    createBalanceContentHTML: () => `<div id="month-12-content" class="month-content"><h2 class="text-3xl font-bold text-center mb-8">Balanço Anual</h2></div>`,
    createEntryElement: (config) => { const { monthIndex, dayIndex, category, entry, type } = config; const d = document.createElement('div'); d.className = 'flex items-center gap-2 w-full flex-wrap'; let r = '', p = '', c = '', s = ''; if (type === 'expense') { r = `<button class="remove-btn" data-type="expense" data-month-index="${monthIndex}" data-day="${dayIndex}" data-category="${category}" data-entry-id="${entry.id}">×</button>`; p = `<select class="entry-input p-2 input-field text-sm w-full sm:w-auto" data-field="paymentMethod">${constants.basePaymentMethods.map(m => `<option value="${m}" ${entry.paymentMethod === m ? 'selected' : ''}>${m}</option>`).join('')}</select>`; if (entry.paymentMethod === 'Crédito') { c = `<select class="entry-input p-2 input-field text-sm w-full sm:w-auto" data-field="card">${(state.creditCards || []).map(card => `<option value="${card}" ${entry.card === card ? 'selected' : ''}>${card}</option>`).join('')}</select>`; } s = `<select class="entry-input p-2 input-field text-sm w-full sm:w-auto" data-field="category">${(state.categories || []).map(cat => `<option value="${cat.name}" ${entry.category === cat.name ? 'selected' : ''}>${cat.name}</option>`).join('')}</select>`; } else { r = `<button class="remove-btn" data-type="${type}" data-month-index="${monthIndex}" data-entry-id="${entry.id}">×</button>`; } d.innerHTML = `<input type="text" value="${entry.description || ''}" placeholder="Descrição" class="entry-input flex-grow p-2 input-field text-sm" data-field="description"><input type="number" value="${entry.amount || 0}" min="0" step="0.01" placeholder="0,00" class="entry-input w-28 p-2 input-field text-sm" data-field="amount">${s}${p}<span class="card-selector-container">${c}</span>${r}`; return d; },
    renderTabs: () => { const monthTabsContainer = document.getElementById('monthTabs'); if (!monthTabsContainer) return; const baseClasses = "px-4 py-2 rounded-xl text-sm font-semibold transition-colors"; const activeClasses = "text-white shadow-sm"; const inactiveClasses = "hover:bg-black/5 dark:hover:bg-white/5"; monthTabsContainer.innerHTML = constants.monthNames.map((name, i) => `<button class="tab-button ${baseClasses} ${i === state.activeMonthIndex ? activeClasses : inactiveClasses}" style="${i === state.activeMonthIndex ? 'background-color: var(--primary-color);' : 'background-color: var(--secondary-bg); color: var(--secondary-text);'}" data-month-index="${i}">${name}</button>`).join(''); },
    renderPJEntries: (m) => { const c = document.getElementById(`pj-entries-container-${m}`); if (c && state.monthlyData[m]) { c.innerHTML = ''; (state.monthlyData[m].pjEntries || []).forEach(e => c.appendChild(render.createEntryElement({ monthIndex: m, entry: e, type: 'pj' }))); } },
    renderPFEntries: (m) => { const c = document.getElementById(`pf-entries-container-${m}`); if (c && state.monthlyData[m]) { c.innerHTML = ''; (state.monthlyData[m].pfEntries || []).forEach(e => c.appendChild(render.createEntryElement({ monthIndex: m, entry: e, type: 'pf' }))); } },
    renderExpenseTable: (m) => { const container = document.getElementById(`expense-accordion-container-${m}`); if (!container || !state.monthlyData[m]) return; container.innerHTML = ''; for (let day = 0; day < 31; day++) { const item = document.createElement('div'); item.className = 'accordion-item card rounded-xl overflow-hidden'; item.innerHTML = `<div class="accordion-trigger flex justify-between items-center p-4 cursor-pointer" style="background-color: var(--input-bg);"><span class="font-semibold">Dia ${day + 1}</span><span class="arrow text-xl muted-text">▼</span></div><div class="accordion-content"><div class="grid grid-cols-1 md:grid-cols-2 gap-6"><div><h3 class="font-semibold mb-3">Gastos Pessoais</h3><div id="personal-entries-${m}-${day}" class="flex flex-col gap-3"></div><button class="add-entry-btn mt-3 px-3 py-1.5 text-sm font-semibold rounded-lg" style="background-color: var(--secondary-bg); color: var(--secondary-text);" data-month-index="${m}" data-day="${day}" data-type="expense" data-category="personal">+ Gasto Pessoal</button></div><div><h3 class="font-semibold mb-3">Gastos da Empresa</h3><div id="business-entries-${m}-${day}" class="flex flex-col gap-3"></div><button class="add-entry-btn mt-3 px-3 py-1.5 text-sm font-semibold rounded-lg" style="background-color: var(--secondary-bg); color: var(--secondary-text);" data-month-index="${m}" data-day="${day}" data-type="expense" data-category="business">+ Gasto Empresa</button></div></div></div>`; container.appendChild(item); ['personal', 'business'].forEach(type => { if(state.monthlyData[m].expenses && state.monthlyData[m].expenses[day]) { const entriesContainer = item.querySelector(`#${type}-entries-${m}-${day}`); (state.monthlyData[m].expenses[day][`${type}Entries`] || []).forEach(e => entriesContainer.appendChild(render.createEntryElement({ monthIndex: m, dayIndex: day, category: type, entry: e, type: 'expense' }))); } }); } },
};

function saveState() { /* ... sua função saveState ... */ }

function recalculateAndDisplayTotals(m) { const d = state.monthlyData[m]; if (!d) return; const t = { pj: (d.pjEntries || []).reduce((s, e) => s + (e.amount || 0), 0), pf: (d.pfEntries || []).reduce((s, e) => s + (e.amount || 0), 0), personal: (d.expenses || []).flat().reduce((a, day) => a + (day.personalEntries || []).reduce((s, e) => s + (e.amount || 0), 0), 0), business: (d.expenses || []).flat().reduce((a, day) => a + (day.businessEntries || []).reduce((s, e) => s + (e.amount || 0), 0), 0) }; t.remainingPersonal = t.pf - t.personal; t.remainingBusiness = t.pj - t.business; t.remainingTotal = (t.pj + t.pf) - (t.personal + t.business); document.getElementById(`companyCash-${m}`).textContent = helpers.formatCurrency(t.pj); document.getElementById(`personalCash-${m}`).textContent = helpers.formatCurrency(t.pf); document.getElementById(`totalPersonalExpenses-${m}`).textContent = helpers.formatCurrency(t.personal); document.getElementById(`totalBusinessExpenses-${m}`).textContent = helpers.formatCurrency(t.business); const rpEl = document.getElementById(`remainingPersonal-${m}`); rpEl.textContent = helpers.formatCurrency(t.remainingPersonal); rpEl.style.color = t.remainingPersonal < 0 ? 'var(--red-color)' : 'var(--green-color)'; const rbEl = document.getElementById(`remainingBusiness-${m}`); rbEl.textContent = helpers.formatCurrency(t.remainingBusiness); rbEl.style.color = t.remainingBusiness < 0 ? 'var(--red-color)' : 'var(--green-color)'; const rtEl = document.getElementById(`remainingTotal-${m}`); rtEl.textContent = helpers.formatCurrency(t.remainingTotal); rtEl.style.color = t.remainingTotal < 0 ? 'var(--red-color)' : 'var(--primary-color)'; }

function showMonth(monthIndex) { if(typeof monthIndex !== 'number') return; state.activeMonthIndex = monthIndex; if(state.chartInstances) Object.values(state.chartInstances).forEach(c => c?.destroy()); document.querySelectorAll('.month-content').forEach(c => c.classList.remove('active')); render.renderTabs(); const contentEl = document.getElementById(`month-${monthIndex}-content`); if (contentEl) { contentEl.classList.add('active'); if (monthIndex < 12) { render.renderPJEntries(monthIndex); render.renderPFEntries(monthIndex); render.renderExpenseTable(monthIndex); recalculateAndDisplayTotals(monthIndex); } } }

async function handleLogin(user) { try { await user.getIdToken(true); document.getElementById('loading-overlay').classList.remove('hidden'); state.currentUserId = user.uid; const userData = await loadUserData(user.uid); Object.assign(state, userData); for (let i = 0; i < 12; i++) { if (!state.monthlyData[i]) { state.monthlyData[i] = { pjEntries: [], pfEntries: [], expenses: Array(31).fill(null).map(() => ({ personalEntries: [], businessEntries: [] })) }; } } initializeAppUI(); } catch (error) { console.error("Ocorreu um erro ao carregar os dados:", error); document.getElementById('loading-overlay').classList.add('hidden'); alert("Não foi possível carregar seus dados. Por favor, tente novamente."); } }

function handleLogout() { state.currentUserId = null; state.monthlyData = {}; document.getElementById('monthContentContainer').innerHTML = ''; document.getElementById('monthTabs').innerHTML = ''; }

function initializeAppUI() { const monthContentContainer = document.getElementById('monthContentContainer'); if (!monthContentContainer) return; monthContentContainer.innerHTML = ''; constants.monthNames.forEach((_, index) => { const html = index < 12 ? render.createMonthContentHTML(index) : render.createBalanceContentHTML(); monthContentContainer.insertAdjacentHTML('beforeend', html); }); showMonth(state.activeMonthIndex); document.getElementById('loading-overlay').classList.add('hidden'); }

function bindGlobalEventListeners() { if (window.listenersAttached) return; document.getElementById('theme-toggle-btn').addEventListener('click', () => { const newTheme = document.documentElement.classList.contains('dark') ? 'light' : 'dark'; localStorage.setItem('theme', newTheme); applyTheme(newTheme); if(state.currentUserId) showMonth(state.activeMonthIndex); }); document.body.addEventListener('click', (event) => { if (!state.currentUserId) return; const target = event.target; if (target.closest('.tab-button')) { showMonth(parseInt(target.closest('.tab-button').dataset.monthIndex)); } if (target.closest('.add-entry-btn')) { const btn = target.closest('.add-entry-btn'); const { monthIndex, type, day, category } = btn.dataset; const m = parseInt(monthIndex); let newEntry; if (type === 'pj') { newEntry = { id: Date.now(), description: '', amount: 0 }; state.monthlyData[m].pjEntries.push(newEntry); render.renderPJEntries(m); } else if (type === 'pf') { newEntry = { id: Date.now(), description: '', amount: 0 }; state.monthlyData[m].pfEntries.push(newEntry); render.renderPFEntries(m); } else if (type === 'expense') { newEntry = { id: Date.now(), description: '', amount: 0, paymentMethod: 'Pix', card: '', category: (state.categories[0] || {}).name || 'Outros' }; state.monthlyData[m].expenses[day][`${category}Entries`].push(newEntry); render.renderExpenseTable(m); } recalculateAndDisplayTotals(m); saveState(); } if (target.closest('.remove-btn')) { const btn = target.closest('.remove-btn'); const { monthIndex, type, day, category, entryId } = btn.dataset; const m = parseInt(monthIndex); const id = parseFloat(entryId); if (type === 'pj') state.monthlyData[m].pjEntries = state.monthlyData[m].pjEntries.filter(e => e.id !== id); else if (type === 'pf') state.monthlyData[m].pfEntries = state.monthlyData[m].pfEntries.filter(e => e.id !== id); else state.monthlyData[m].expenses[day][`${category}Entries`] = state.monthlyData[m].expenses[day][`${category}Entries`].filter(e => e.id !== id); btn.closest('.flex').remove(); recalculateAndDisplayTotals(m); saveState(); } }); document.body.addEventListener('input', (event) => { if (!state.currentUserId) return; const target = event.target; if (target.matches('.entry-input')) { const field = target.dataset.field; let value = target.value; if (field === 'amount') value = parseFloat(value) || 0; const btn = target.closest('.flex').querySelector('.remove-btn'); if (!btn) return; const { monthIndex, type, day, category, entryId } = btn.dataset; const m = parseInt(monthIndex); const id = parseFloat(entryId); let entry; if (type === 'pj') entry = state.monthlyData[m].pjEntries.find(e => e.id === id); else if (type === 'pf') entry = state.monthlyData[m].pfEntries.find(e => e.id === id); else entry = state.monthlyData[m].expenses[day][`${category}Entries`].find(e => e.id === id); if (entry) entry[field] = value; recalculateAndDisplayTotals(m); saveState(); } }); window.listenersAttached = true; }

function main() { applyTheme(localStorage.getItem('theme') || 'light'); bindGlobalEventListeners(); setupAuthEventListeners(handleLogin, handleLogout); }

main();
